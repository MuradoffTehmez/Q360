# core/notifications.py
"""
Q360 Bildiri≈ü Sistemi Helper Funksiyalarƒ±
Bildiri≈ü yaratma v…ô g√∂nd…ôrm…ô √º√ß√ºn avtomatla≈üdƒ±rƒ±lmƒ±≈ü funksiyalar
"""

from django.utils import timezone
from django.core.cache import cache
from .models import Notification, Ishchi, Qiymetlendirme, InkishafPlani, Hedef
from .tasks import send_notification_email_task
import logging

logger = logging.getLogger(__name__)

class NotificationManager:
    """Bildiri≈ü idar…ôetm…ô meneceri"""
    
    @staticmethod
    def create_and_send(recipient, title, message, notification_type=None, 
                       priority=None, sender=None, action_url=None, 
                       action_text=None, send_email=False, expires_in_days=30):
        """
        Bildiri≈ü yaradƒ±r v…ô opsional olaraq e-po√ßt g√∂nd…ôrir
        """
        try:
            # Bildiri≈ü yarat
            notification = Notification.create_notification(
                recipient=recipient,
                title=title,
                message=message,
                notification_type=notification_type,
                priority=priority,
                sender=sender,
                action_url=action_url,
                action_text=action_text,
                expires_in_days=expires_in_days
            )
            
            # Cache-d…ô unread count-u yenil…ô
            cache_key = f"unread_notifications:{recipient.id}"
            cache.delete(cache_key)
            
            # E-po√ßt g√∂nd…ôr (…ôg…ôr ist…ônilirs…ô)
            if send_email and recipient.email:
                try:
                    send_notification_email_task.delay(
                        user_email=recipient.email,
                        notification_type='general_notification',
                        context={
                            'subject': title,
                            'title': title,
                        'message': message,
                        'action_url': action_url,
                        'action_text': action_text,
                        'user_name': recipient.get_full_name() or recipient.username
                    }
                    )
                except Exception as celery_error:
                    logger.error(f"Celery email x…ôtasƒ±: {celery_error}")
                    # Redis problemi varsa, sync email g√∂nd…ôr
                    from .tasks import send_notification_email_sync
                    send_notification_email_sync(
                        user_email=recipient.email,
                        notification_type='general_notification',
                        context={
                            'subject': title,
                            'title': title,
                            'message': message,
                            'action_url': action_url,
                            'action_text': action_text,
                            'user_name': recipient.get_full_name() or recipient.username
                        }
                    )
            
            logger.info(f"Bildiri≈ü yaradƒ±ldƒ±: {title} -> {recipient.username}")
            return notification
            
        except Exception as e:
            logger.error(f"Bildiri≈ü yaradƒ±lma x…ôtasƒ±: {e}")
            return None
    
    @staticmethod
    def bulk_notify(recipients, title, message, **kwargs):
        """
        √áoxlu istifad…ô√ßiy…ô eyni bildiri≈üi g√∂nd…ôr
        """
        notifications = []
        for recipient in recipients:
            notification = NotificationManager.create_and_send(
                recipient=recipient,
                title=title,
                message=message,
                **kwargs
            )
            if notification:
                notifications.append(notification)
        
        return notifications
    
    @staticmethod
    def notify_managers(organization_unit, title, message, **kwargs):
        """
        M√º…ôyy…ôn t…ô≈ükilati vahidin r…ôhb…ôrl…ôrin…ô bildiri≈ü g√∂nd…ôr
        """
        managers = Ishchi.objects.filter(
            organization_unit=organization_unit,
            rol__in=['REHBER', 'ADMIN', 'SUPERADMIN']
        )
        
        return NotificationManager.bulk_notify(managers, title, message, **kwargs)
    
    @staticmethod
    def notify_hr_team(title, message, **kwargs):
        """
        HR komandasƒ± √ºzvl…ôrin…ô bildiri≈ü g√∂nd…ôr
        """
        hr_managers = Ishchi.objects.filter(
            groups__name__in=['HR Manager', 'Super Admin']
        )
        
        return NotificationManager.bulk_notify(hr_managers, title, message, **kwargs)
    
    @staticmethod
    def get_user_notifications(user, limit=20, unread_only=False):
        """
        ƒ∞stifad…ô√ßinin bildiri≈ül…ôrini cache il…ô g…ôtir
        """
        cache_key = f"user_notifications:{user.id}:{limit}:{unread_only}"
        notifications = cache.get(cache_key)
        
        if notifications is None:
            query = Notification.objects.filter(
                recipient=user, 
                is_archived=False
            )
            
            if unread_only:
                query = query.filter(is_read=False)
            
            notifications = list(query[:limit])
            cache.set(cache_key, notifications, 300)  # 5 d…ôqiq…ô cache
        
        return notifications
    
    @staticmethod
    def mark_all_as_read(user):
        """
        ƒ∞stifad…ô√ßinin b√ºt√ºn bildiri≈ül…ôrini oxunmu≈ü kimi i≈üar…ôl…ô
        """
        updated_count = Notification.objects.filter(
            recipient=user,
            is_read=False,
            is_archived=False
        ).update(
            is_read=True,
            read_at=timezone.now()
        )
        
        # Cache-i t…ômizl…ô
        cache_keys = [
            f"unread_notifications:{user.id}",
            f"user_notifications:{user.id}:*"
        ]
        cache.delete_many(cache_keys)
        
        return updated_count


# === X√úSUSƒ∞ Bƒ∞LDƒ∞Rƒ∞≈û FUNKSƒ∞YALARI ===

def notify_task_assigned(employee, task_title, task_description, evaluator, due_date=None):
    """Yeni tap≈üƒ±rƒ±q t…ôyin edil…ônd…ô bildiri≈ü"""
    action_url = f"/qiymetlendirmeler/"
    
    message = f"Siz…ô yeni tap≈üƒ±rƒ±q t…ôyin edildi: {task_description}"
    if due_date:
        message += f" Son tarix: {due_date.strftime('%d.%m.%Y')}"
    
    return NotificationManager.create_and_send(
        recipient=employee,
        title=f"Yeni Tap≈üƒ±rƒ±q: {task_title}",
        message=message,
        notification_type=Notification.NotificationType.TASK_ASSIGNED,
        priority=Notification.Priority.HIGH,
        sender=evaluator,
        action_url=action_url,
        action_text="Tap≈üƒ±rƒ±ƒüa Bax",
        send_email=True
    )

def notify_deadline_approaching(employee, task_title, days_remaining):
    """Son tarix yaxƒ±nla≈üdƒ±ƒüƒ±nda xatƒ±rlatma"""
    priority = Notification.Priority.URGENT if days_remaining <= 2 else Notification.Priority.HIGH
    
    message = f"'{task_title}' tap≈üƒ±rƒ±ƒüƒ±nƒ±n son tarixi {days_remaining} g√ºn qalƒ±b."
    
    return NotificationManager.create_and_send(
        recipient=employee,
        title="‚è∞ Son Tarix Xatƒ±rlatmasƒ±",
        message=message,
        notification_type=Notification.NotificationType.DEADLINE_REMINDER,
        priority=priority,
        action_url="/dashboard/",
        action_text="Tap≈üƒ±rƒ±qlara Bax",
        send_email=True
    )

def notify_evaluation_completed(employee, evaluator, evaluation_score):
    """Qiym…ôtl…ôndirm…ô tamamlandƒ±ƒüƒ±nda bildiri≈ü"""
    message = f"Performans qiym…ôtl…ôndirm…ôniz tamamlandƒ±. √úmumi bal: {evaluation_score}"
    
    return NotificationManager.create_and_send(
        recipient=employee,
        title="‚úÖ Qiym…ôtl…ôndirm…ô Tamamlandƒ±",
        message=message,
        notification_type=Notification.NotificationType.EVALUATION_COMPLETED,
        priority=Notification.Priority.MEDIUM,
        sender=evaluator,
        action_url="/qiymetlendirmelerim/",
        action_text="Qiym…ôtl…ôndirm…ôni G√∂r",
        send_email=True
    )

def notify_plan_approved(employee, approver, plan_title):
    """ƒ∞nki≈üaf planƒ± t…ôsdiql…ôn…ônd…ô bildiri≈ü"""
    message = f"'{plan_title}' inki≈üaf planƒ±nƒ±z t…ôsdiql…ôndi v…ô icrasƒ±na ba≈ülaya bil…ôrsiniz."
    
    return NotificationManager.create_and_send(
        recipient=employee,
        title="üëç ƒ∞nki≈üaf Planƒ± T…ôsdiql…ôndi",
        message=message,
        notification_type=Notification.NotificationType.PLAN_APPROVED,
        priority=Notification.Priority.MEDIUM,
        sender=approver,
        action_url="/inkishaf-planlari/",
        action_text="Planƒ± G√∂r",
        send_email=True
    )

def notify_feedback_received(admin_user, feedback):
    """Yeni geri bildirim g…ôldiyind…ô admin-l…ôr…ô bildiri≈ü"""
    message = f"Yeni geri bildirim alƒ±nƒ±b: {feedback.title} (N√∂v: {feedback.get_feedback_type_display()})"
    
    return NotificationManager.create_and_send(
        recipient=admin_user,
        title="üí¨ Yeni Geri Bildirim",
        message=message,
        notification_type=Notification.NotificationType.FEEDBACK_RECEIVED,
        priority=Notification.Priority.MEDIUM,
        action_url=f"/admin/core/feedback/{feedback.id}/change/",
        action_text="Geri Bildirimi G√∂r",
        send_email=True
    )

def notify_goal_deadline(employee, goal_title, days_remaining):
    """H…ôd…ôfin son tarixi yaxƒ±nla≈üdƒ±ƒüƒ±nda bildiri≈ü"""
    priority = Notification.Priority.URGENT if days_remaining <= 3 else Notification.Priority.HIGH
    
    message = f"'{goal_title}' h…ôd…ôfinizin son tarixi {days_remaining} g√ºn qalƒ±b."
    
    return NotificationManager.create_and_send(
        recipient=employee,
        title="üéØ H…ôd…ôf Son Tarix Xatƒ±rlatmasƒ±", 
        message=message,
        notification_type=Notification.NotificationType.DEADLINE_REMINDER,
        priority=priority,
        action_url="/inkishaf-planlari/",
        action_text="H…ôd…ôfl…ôr…ô Bax",
        send_email=True
    )

def notify_system_update(title, message, importance="medium"):
    """Sistem yenil…ôm…ôsi haqqƒ±nda b√ºt√ºn istifad…ô√ßil…ôr…ô bildiri≈ü"""
    priority_map = {
        "low": Notification.Priority.LOW,
        "medium": Notification.Priority.MEDIUM, 
        "high": Notification.Priority.HIGH,
        "urgent": Notification.Priority.URGENT
    }
    
    # Aktiv istifad…ô√ßil…ôr…ô g√∂nd…ôr
    active_users = Ishchi.objects.filter(is_active=True)
    
    return NotificationManager.bulk_notify(
        recipients=active_users,
        title=f"üîÑ {title}",
        message=message,
        notification_type=Notification.NotificationType.SYSTEM_UPDATE,
        priority=priority_map.get(importance, Notification.Priority.MEDIUM),
        expires_in_days=7
    )

def notify_new_employee_joined(new_employee, hr_managers):
    """Yeni i≈ü√ßi qo≈üulduƒüunda HR-a bildiri≈ü"""
    message = f"Yeni i≈ü√ßi qeydiyyatdan ke√ßdi: {new_employee.get_full_name()} ({new_employee.username})"
    if hr_managers:
        return NotificationManager.bulk_notify(
            recipients=hr_managers,
            title="üëã Yeni ƒ∞≈ü√ßi Qo≈üuldu",
            message=message,
            notification_type=Notification.NotificationType.INFO,
            priority=Notification.Priority.MEDIUM,
            action_url=f"/admin/core/ishchi/{new_employee.id}/change/",
            action_text="Profil…ô Bax"
        )
    return []


# === AVTOMATƒ∞K XATƒ∞RLATMA Sƒ∞STEMƒ∞ ===

def send_weekly_reminders():
    """
    H…ôft…ôlik avtomatik xatƒ±rlatmalar g√∂nd…ôr
    Celery beat tap≈üƒ±rƒ±ƒüƒ± kimi i≈ül…ôy…ô bil…ôr
    """
    from datetime import date, timedelta
    
    today = date.today()
    week_later = today + timedelta(days=7)
    
    # 1. Son tarixi yaxƒ±n olan h…ôd…ôfl…ôr
    upcoming_goals = Hedef.objects.filter(
        son_tarix__lte=week_later,
        son_tarix__gte=today,
        status__in=['BASHLANMAYIB', 'ICRADA']
    )
    
    for goal in upcoming_goals:
        days_remaining = (goal.son_tarix - today).days
        if days_remaining <= 7 and hasattr(goal, 'plan') and getattr(goal.plan, 'ishchi', None):
            notify_goal_deadline(
                employee=goal.plan.ishchi,
                goal_title=goal.tesvir[:50],
                days_remaining=days_remaining
            )
    
    # 2. Tamamlanmamƒ±≈ü qiym…ôtl…ôndirm…ôl…ôr xatƒ±rlatmasƒ±
    # Bu hiss…ôni g…ôl…ôc…ôkd…ô …ôlav…ô ed…ô bil…ôrik
    
    logger.info("H…ôft…ôlik xatƒ±rlatmalar g√∂nd…ôrildi")

def cleanup_old_notifications():
    """
    K√∂hn…ô bildiri≈ül…ôri t…ômizl…ô
    Celery beat tap≈üƒ±rƒ±ƒüƒ± kimi i≈ül…ôy…ô bil…ôr
    """
    # 30 g√ºnd…ôn k√∂hn…ô oxunmu≈ü bildiri≈ül…ôri arxivl…ô≈üdir
    from datetime import timedelta
    
    cutoff_date = timezone.now() - timedelta(days=30)
    archived_count = Notification.objects.filter(
        created_at__lt=cutoff_date,
        is_read=True,
        is_archived=False
    ).update(is_archived=True)
    
    # M√ºdd…ôti bitmi≈ü bildiri≈ül…ôri arxivl…ô≈üdir
    expired_count = 0
    if hasattr(Notification, 'cleanup_expired'):
        expired_count = Notification.cleanup_expired()
    
    logger.info(f"Bildiri≈ü t…ômizliyi: {archived_count} k√∂hn…ô, {expired_count} m√ºdd…ôti bitmi≈ü")
    
    return archived_count + expired_count